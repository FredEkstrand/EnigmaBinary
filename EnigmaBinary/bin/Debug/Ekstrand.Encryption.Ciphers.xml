<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ekstrand.Encryption.Ciphers</name>
    </assembly>
    <members>
        <member name="T:Ekstrand.Encryption.Ciphers.AbstractCipherController">
            <summary>
            Abstract base class for cipher operations with the Plugboard, Rotors and Turns
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.ICipherController" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractCipherController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.AbstractCipherController"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractCipherController.Initialize">
            <summary>
            Initializes cipher controller sub-components
            </summary>
            <exception cref="T:System.NullReferenceException">RotorController</exception>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractCipherController.ProcessByte(System.Byte,System.Boolean)">
            <summary>
            Encode/Decode given byte
            </summary>
            <param name="value">Byte value to be encoded/decoded</param>
            <param name="encode">Boolean <c>true</c> to encode and <c>false</c> to decode.</param>
            <returns>
            Return an encoded/decoded byte
            </returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractCipherController.Reset">
            <summary>
            Resets back to its start state
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractCipherController.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractCipherController.RotorController">
            <summary>
            Gets or sets the rotor controller.
            </summary>
            <value>
            The rotor controller.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractCipherController.Plugboard">
            <summary>
            Gets or sets the plugboard.
            </summary>
            <value>
            The plugboard.
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.AbstractPlugboard">
            <summary>
            Abstract base class defining common operations.
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.IPlugboard" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractPlugboard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.AbstractPlugboard"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractPlugboard.Transpose(System.Byte)">
            <summary>
            Transposes the specified value.
            </summary>
            <param name="value">byte value to be transposed</param>
            <returns>
            Return a transposed byte iff plugboard has a transpose mapping, otherwise; return the given byte
            </returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractPlugboard.Clear">
            <summary>
            Clears all settings
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractPlugboard.Reset">
            <summary>
            Resets the Plugboard back to a start state.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractPlugboard.PopulateTransulationPoints(Ekstrand.Encryption.Ciphers.EndPointPair{System.Byte,System.Byte}[])">
            <summary>
            Populates the translation points.
            </summary>
            <param name="values">Array of EndPointPair&lt;byte, byte&gt;</param>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractPlugboard.ValidateTranslationPoints(Ekstrand.Encryption.Ciphers.EndPointPair{System.Byte,System.Byte}[])">
            <summary>
            Validates the Translation points.
            </summary>
            <param name="values">An array of EndPointPair&lt;byte, byte&gt;</param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractPlugboard.TranspositionSet">
            <summary>
            Gets or sets the transposition set.
            </summary>
            <value>
            The transposition set.
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.AbstractRotor">
            <summary>
            Abstract base class defining common operations.
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.IRotor" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractRotor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.AbstractRotor"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractRotor.Clear">
            <summary>
            Clear all settings
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractRotor.ProcessByte(System.Byte,System.Boolean)">
            <summary>
            Endcode/Decode byte
            </summary>
            <param name="value">The value.</param>
             /// <param name="encode">Bool mode of operation "true" is encode and "false" is decode</param>
            <returns>
            Return encode/decode byte
            </returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractRotor.Reset">
            <summary>
            Reset Rotor back to starting position
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractRotor.Turn">
            <summary>
            Turn a rotor
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractRotor.PopulateTransulationPoints(Ekstrand.Encryption.Ciphers.EndPointPair{System.Byte,System.Byte}[])">
            <summary>
            Populates the transulation points.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractRotor.ValidateTransulationPoints(Ekstrand.Encryption.Ciphers.EndPointPair{System.Byte,System.Byte}[])">
            <summary>
            Validates the transulation points.
            </summary>
            <param name="values">The values.</param>
            <exception cref="T:System.InvalidOperationException">Can not change end points while in use. You must Reset first.</exception>
            <exception cref="T:System.ArgumentException">
            Value array size must be 256
            or
            Duplicate Side-A end points.
            or
            Duplicate Side-A end points.
            </exception>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractRotor.HasCycled">
            <summary>
            Determines whether this instance has cycled.
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractRotor.Position">
            <summary>
            Gets the current position of the rotor.
            </summary>
            <value>
            Current rotor position.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractRotor.NextRotor">
            <summary>
            Gets or sets the next rotor.
            </summary>
            <value>
            The next rotor.
            </value>
            <exception cref="T:System.InvalidOperationException">Can not change end points while in use. You must Reset first.</exception>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractRotor.StartPosition">
            <summary>
            Gets or sets the start position.
            </summary>
            <value>
            Integer values (0 - 255) for position for rotor to start.
            </value>
            <exception cref="T:System.InvalidOperationException">Can not change end points while in use. You must Reset first.</exception>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractRotor.SubstitutionSet">
            <summary>
            Gets or sets the substitution set.
            </summary>
            <value>
            Array of EndPointPair&lt;byte, byte&gt;
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractRotor.TurnDirection">
            <summary>
            Gets or sets the turn direction.
            </summary>
            <value>
            RotorTurnDirection enum value.
            </value>
            <exception cref="T:System.InvalidOperationException">Can not change end points while in use. You must Reset first.</exception>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractRotor.Cycled">
            <summary>
            Gets a value indicating whether this <see cref="T:Ekstrand.Encryption.Ciphers.IRotor" /> has cycled.
            </summary>
            <value>
              <c>true</c> if cycled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractRotor.Incrementation">
            <summary>
            Gets or Sets the incrementation of the rotor.
            </summary>
            <value>
            The incrementation.
            </value>
            <exception cref="T:System.InvalidOperationException">Can not change end points while in use. You must Reset first.</exception>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.AbstractRotorController">
            <summary>
            Abstract base class for operation of EntryRotor, Rotors, Reflector, and Turns.
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.IRotorController" />
        </member>
        <member name="F:Ekstrand.Encryption.Ciphers.AbstractRotorController.m_Rotors">
            <summary>
            The rotor collection
            </summary>
        </member>
        <member name="F:Ekstrand.Encryption.Ciphers.AbstractRotorController.m_Turns">
            <summary>
            The turn collection
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractRotorController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.AbstractRotorController"/> class.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractRotorController.Initialize">
            <summary>
            Initialize this instance.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractRotorController.ProcessByte(System.Byte,System.Boolean)">
            <summary>
            Encoding/Decoding of byte.
            </summary>
            <param name="value">Byte to be encoded/decoded</param>
            <param name="encode">Bool <c>true</c> to encode byte or <c>false</c> to decode byte.</param>
            <returns>
            Return encoded/decoded byte
            </returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractRotorController.Reset">
            <summary>
            Resets controller back to starting position
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractRotorController.Clear">
            <summary>
            Clears all settings for this controller
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractRotorController.EntryRotor">
            <summary>
            Gets or sets the entry rotor.
            </summary>
            <value>
            The entry rotor.
            </value>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractRotorController.Rotors">
            <summary>
            Gets the collection of rotors
            </summary>
            <value>
            The rotors.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractRotorController.Reflector">
            <summary>
            Gets or sets the reflector.
            </summary>
            <value>
            The reflector.
            </value>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractRotorController.Turns">
            <summary>
            Gets or sets the turns.
            </summary>
            <value>
            The turns.
            </value>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.AbstractTurn">
            <summary>
            Abstract base class defining common operation.
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.ITurn" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractTurn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.AbstractTurn"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractTurn.TurnRotor">
            <summary>
            Turns the rotor.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractTurn.Clear">
            <summary>
            Clears all settings
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.AbstractTurn.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractTurn.Rotor">
            <summary>
            Gets or sets the rotor.
            </summary>
            <value>
            Rotor object
            </value>
            <exception cref="T:System.InvalidOperationException">Rotor</exception>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractTurn.NextTurn">
            <summary>
            Gets or sets the next turn.
            </summary>
            <value>
            Next Turn object
            </value>
            <exception cref="T:System.InvalidOperationException">Rotor</exception>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractTurn.FullyCycled">
            <summary>
            Gets a value indicating whether [fully cycled].
            </summary>
            <value>
              <c>true</c> if [fully cycled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.AbstractTurn.StarterRotor">
            <summary>
            Gets a value indicating whether Rotor is starter
            </summary>
            <value>
              <c>true</c> if starter rotor otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.CipherController">
            <summary>
            Cipher operations encompassing Plugboard, Rotors and Turns
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.AbstractCipherController" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.CipherController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.CipherController"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.CipherController.Initialize">
            <summary>
            Initializes cipher controller sub-components
            </summary>
            <exception cref="T:System.NullReferenceException">RotorController</exception>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.CipherController.ProcessByte(System.Byte,System.Boolean)">
            <summary>
            Encode/Decode given byte
            </summary>
            <param name="value">Byte value to be encoded/decoded</param>
            <param name="encode">Boolean <c>true</c> to encode and <c>false</c> to decode.</param>
            <returns>
            Return an encoded/decoded byte
            </returns>
            <exception cref="T:System.NullReferenceException">
            RotorController
            or
            Plugboard
            </exception>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.CipherController.Reset">
            <summary>
            Resets back to its start state
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.CipherController.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.CryptoException">
            <summary>
            Defines cryptografie Exception types.
            </summary>
            <seealso cref="T:System.Exception" />
            
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.CryptoException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.CryptoException"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.CryptoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.CryptoException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.CryptoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.CryptoException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.DataLengthException">
            <summary>
            Data Length Exception
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.CryptoException" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.DataLengthException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.DataLengthException"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.DataLengthException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.DataLengthException"/> class.
            </summary>
            <param name="message">The message to be carried with the exception.</param>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.DataLengthException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.DataLengthException"/> class.
            </summary>
            <param name="message">The message to be carried with the exception.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.EndPointPair`2">
            <summary>
            Defines an end point pair.
            </summary>
            <typeparam name="T1">Type T1</typeparam>
            <typeparam name="T2">Type T2</typeparam>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EndPointPair`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.EndPointPair`2"/> class.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EndPointPair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.EndPointPair`2"/> class.
            </summary>
            <param name="sideA">Type T1</param>
            <param name="sideB">Type T2</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EndPointPair`2.SideA">
            <summary>
            Gets or sets the SideA
            </summary>
            <value>
            Type T1
            </value>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EndPointPair`2.SideB">
            <summary>
            Gets or sets the SideB.
            </summary>
            <value>
            Type T2
            </value>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EndPointPair`2.CompareTo(System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="obj">The object.</param>
            <returns>Returns -1 if less than or null, 0 if equal or 1 if greater than.</returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EndPointPair`2.CompareTo(`0)">
            <summary>
            Compares to.
            </summary>
            <param name="other">Type EndPointPair&lt;T1, T2&gt;</param>
            <returns>Returns -1 if less than or null, 0 if equal or 1 if greater than.</returns>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary">
            <summary>
            Enigma Binary
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.IStreamCipher" />
        </member>
        <member name="F:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.m_SettingsInUse">
            <summary>
            Guard from changing settings while in use. Force user to use reset. 
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.Init(System.Boolean,Ekstrand.Encryption.Ciphers.ICipherParameters)">
            <summary>
            Initialize the cipher.
            </summary>
            <param name="forEncryption">Initialize for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.ReturnByte(System.Byte)">
            <summary>
            encrypt/decrypt a single byte returning the result.
            </summary>
            <param name="input">the byte to be processed.</param>
            <returns>
            the result of processing the input byte.
            </returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process a block of bytes from <c>input</c> putting the result into <c>output</c>.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inOff">The offset into <c>input</c> where the data to be processed starts.</param>
            <param name="length">The number of bytes to be processed.</param>
            <param name="output">The output buffer the processed bytes go into.</param>
            <param name="outOff">The offset into <c>output</c> the processed data starts at.</param>
            <exception cref="T:System.InvalidOperationException">You must call Init(...) before processing blocks</exception>
            <exception cref="T:Ekstrand.Encryption.Ciphers.DataLengthException">
            Input buffer too short.
            or
            Output buffer too short.
            </exception>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.ReturnConfiguration">
            <summary>
            Returns the current configuration of the EnigmaBinary
            </summary>
            <returns>Return EnigmaBinaryParameters</returns>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.AlgorithmName">
            <summary>
            Gets the name of the algorithm.
            </summary>
            <value>
            The name of the algorithm.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.IsPartialBlockOkay">
            <summary>
            Indicates whether this cipher can handle partial blocks.
            </summary>
            <value>
            <c>true</c> if this instance is partial block okay; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.Version">
            <summary>
            Gets the version.
            </summary>
            <value>
            The EnigmaBinary Version
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.EntryRotor">
            <summary>
            Gets or sets the entry rotor.
            </summary>
            <value>
            Type of EntryRotor
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.Rotors">
            <summary>
            Gets the rotor collection.
            </summary>
            <value>
            Collection of Rotors
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.Reflector">
            <summary>
            Gets or sets the reflector.
            </summary>
            <value>
            Type of IReflector
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.Plugboard">
            <summary>
            Gets or sets the plugboard.
            </summary>
            <value>
            Type of IPlugboard
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.Turns">
            <summary>
            Gets the turn collection.
            </summary>
            <value>
            Collection of Turns
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.RotorController">
            <summary>
            Gets or sets the rotor controller.
            </summary>
            <value>
            Type of IRotorController
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinary.EnigmaBinary.CipherController">
            <summary>
            Gets or sets the cipher controller.
            </summary>
            <value>
            The cipher controller.
            </value>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaBinaryConfiguration.ReturnConfiguration(Ekstrand.Encryption.Ciphers.EnigmaManager)">
            <summary>
            Returns an EnigmaBinaryParameters of the current Enigma Binary configuration.
            </summary>
            <param name="em">EnigmaManager em</param>
            <returns>Return EnigmaBinaryParameters of the current configuration.</returns>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.EnigmaBinaryParameters">
            <summary>
            Provide configuration for the Encryption.Ciphers
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.ICipherParameters" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaBinaryParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.EnigmaBinaryParameters"/> class.
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinaryParameters.EntryRotorParameters">
            <summary>
            Gets or sets the entry rotor parameters.
            </summary>
            <value>
            EntryRotorParameters
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinaryParameters.EntryRotor">
            <summary>
            Gets or sets the EntryRotor
            </summary>
            <value>
            The entry rotor.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinaryParameters.RotorParameters">
            <summary>
            Gets the rotor parameters collection.
            </summary>
            <value>
            The rotor parameters collection.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinaryParameters.Rotors">
            <summary>
            Gets the rotor collection
            </summary>
            <value>
            Rotor collection.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinaryParameters.ReflectorParameters">
            <summary>
            Gets or sets the reflector parameters.
            </summary>
            <value>
            The reflector parameters.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinaryParameters.Reflector">
            <summary>
            Gets or sets the reflector.
            </summary>
            <value>
            The reflector.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinaryParameters.Turns">
            <summary>
            Gets the turns collection.
            </summary>
            <value>
            The turns collection.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinaryParameters.Plugboard">
            <summary>
            Gets or sets the plugboard.
            </summary>
            <value>
            The plugboard.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinaryParameters.PlugboardParameters">
            <summary>
            Gets or sets the plugboard parameters.
            </summary>
            <value>
            The plugboard parameters.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinaryParameters.RotorController">
            <summary>
            Gets or sets the rotor controller.
            </summary>
            <value>
            The rotor controller.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaBinaryParameters.CipherController">
            <summary>
            Gets or sets the cipher controller.
            </summary>
            <value>
            The cipher controller.
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.EnigmaManager">
            <summary>
            Responsible for managing operation, initialization, and configuring: EntryRotor, Rotors, Reflector, Turn, Plugboard, CipherController.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.EnigmaManager"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaManager.#ctor(Ekstrand.Encryption.Ciphers.ICipherParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.EnigmaManager"/> class.
            </summary>
            <param name="param">The parameter.</param>
            <exception cref="T:System.NullReferenceException">CipherParameters</exception>
            <exception cref="T:System.ArgumentException">CipherParameters not of type EnigmaBinaryParameters</exception>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaManager.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaManager.ProcessByte(System.Byte,System.Boolean)">
            <summary>
            Processes the byte.
            </summary>
            <param name="value">The value.</param>
            <param name="encrypted"><c>bool</c> <c>true</c> to encrypt or <c>false</c> to decrypt</param>
            <returns>Return encrypted byte</returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaManager.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaManager.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaManager.ReturnConfiguration">
            <summary>
            Returns the enigma configuration.
            </summary>
            <returns>Returns EnigmabinaryParameters with current configurations.</returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaManager.InitRotors">
            <summary>
            Initializes the rotors.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaManager.InitEntryRotor">
            <summary>
            Initializes the entry rotor.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaManager.InitReflector">
            <summary>
            Initializes the reflector.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaManager.InitTurn">
            <summary>
            Initializes the turn.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EnigmaManager.InitPlugboard">
            <summary>
            Initializes the plugboard.
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EnigmaManager.CipherController">
            <summary>
            Gets or sets the cipher controller.
            </summary>
            <value>
            The cipher controller.
            </value>
            <exception cref="T:System.InvalidOperationException">Can not change Cipher Controller while in use. You must call Clear.</exception>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.EntryRotor">
            <summary>
            Defines EntryRotor operations.
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.AbstractRotor" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EntryRotor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.EntryRotor"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EntryRotor.#ctor(Ekstrand.Encryption.Ciphers.EndPointPair{System.Byte,System.Byte}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.EntryRotor"/> class.
            </summary>
            <param name="value">Array of EndPointPair&lt;byte, byte&gt;</param>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EntryRotor.ProcessByte(System.Byte,System.Boolean)">
            <summary>
            Endcode/Decode byte
            </summary>
            <param name="value">The value.</param>
            /// <param name="encode">Bool mode of operation "true" is encode and "false" is decode</param>
            <returns>
            Return encode/decode byte
            </returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EntryRotor.Reset">
            <summary>
            Reset Rotor back to starting position
            </summary>
            <remarks>Not used</remarks>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EntryRotor.Clear">
            <summary>
            Clear all settings
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EntryRotor.Turn">
            <summary>
            Turn a rotor
            </summary>
            <remarks>Not used</remarks>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EntryRotor.HasCycled">
            <summary>
            Determines whether this instance has cycled.
            </summary>
            <remarks>Not used and will return false</remarks>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.EntryRotorParameters">
            <summary>
            Provide configuration for EntryRotor
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.IEntryRotorParameters" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.EntryRotorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.EntryRotorParameters"/> class.
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.EntryRotorParameters.SubstitutionSet">
            <summary>
            Gets or sets the substitution set.
            </summary>
            <value>
            The substitution set.
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.ICipherController">
            <summary>
            Defines methods for cipher controller operations
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.ICipherController.Initialize">
            <summary>
            Initializes cipher controller sub-components
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.ICipherController.ProcessByte(System.Byte,System.Boolean)">
            <summary>
            Encode/Decode given byte
            </summary>
            <param name="value">Byte value to be encoded/decoded</param>
            <param name="encode">Boolean <c>true</c> to encode and <c>false</c> to decode.</param>
            <returns>Return an encoded/decoded byte</returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.ICipherController.Reset">
            <summary>
            Resets back to its start state
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.ICipherController.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.ICipherController.RotorController">
            <summary>
            Gets or sets the rotor controller.
            </summary>
            <value>
            The rotor controller.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.ICipherController.Plugboard">
            <summary>
            Gets or sets the plugboard.
            </summary>
            <value>
            The plugboard.
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.ICipherParameters">
            <summary>
            Generic interface used for any Cipher
            </summary>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.IEntryRotorParameters">
            <summary>
            Provide configuraiton for the EntryRotor
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IEntryRotorParameters.SubstitutionSet">
            <summary>
            Gets or sets the substitution set.
            </summary>
            <value>
            Array of EndPointPair&lt;byte, byte&gt;
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.IPlugboard">
            <summary>
            Defines methods for Plugboard operations
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IPlugboard.Transpose(System.Byte)">
            <summary>
            Transposes the specified value.
            </summary>
            <param name="value">byte value to be transposed</param>
            <returns>Return a transposed byte iff plugboard has a transpose mapping, otherwise; return the given byte</returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IPlugboard.Clear">
            <summary>
            Clears all settings
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IPlugboard.Reset">
            <summary>
            Resets the Plugboard back to a start state.
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IPlugboard.TranspositionSet">
            <summary>
            Gets or sets the transposition set.
            </summary>
            <value>
            Array of EndPointPair&lt;byte, byte&gt;
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.IReflectorParameters">
            <summary>
            Provides configuration settings for a Reflector
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IReflectorParameters.SubstitutionSet">
            <summary>
            Gets or sets the substitution set.
            </summary>
            <value>
            An array of EndPointPair&lt;byte, byte&gt;
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.IRotor">
            <summary>
            Defines methods for Rotor operations
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IRotor.ProcessByte(System.Byte,System.Boolean)">
            <summary>
            Endcode/Decode byte
            </summary>
            <param name="value">The value.</param>
             /// <param name="encode">Bool mode of operation "true" is encode and "false" is decode</param>
            <returns>Return encode/decode byte</returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IRotor.Turn">
            <summary>
            Turn a rotor
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IRotor.Reset">
            <summary>
            Reset Rotor back to starting position
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IRotor.Clear">
            <summary>
            Clear all settings
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotor.StartPosition">
            <summary>
            Gets or sets the start position.
            </summary>
            <value>
            The start position.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotor.Position">
            <summary>
            Gets current position of the rotor.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotor.TurnDirection">
            <summary>
            Gets or sets the turn direction.
            </summary>
            <value>
            The turn direction.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotor.SubstitutionSet">
            <summary>
            Gets or sets the substitution set.
            </summary>
            <value>
            The substitution set.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotor.NextRotor">
            <summary>
            Gets or sets the next rotor.
            </summary>
            <value>
            The next rotor.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotor.Cycled">
            <summary>
            Gets a value indicating whether this <see cref="T:Ekstrand.Encryption.Ciphers.IRotor"/> is cycled.
            </summary>
            <value>
              <c>true</c> if cycled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotor.Incrementation">
            <summary>
            Gets the incrementation.
            </summary>
            <value>
            The incrementation.
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.IRotorController">
            <summary>
            Defines methods for EntryRotor, Rotors, Reflector, and Turns operations
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IRotorController.Initialize">
            <summary>
            Initialize this instance.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IRotorController.ProcessByte(System.Byte,System.Boolean)">
            <summary>
            Encoding/Decoding of byte.
            </summary>
            <param name="value">Byte to be encoded/decoded</param>
            <param name="encode">Bool <c>true</c> to encode byte or <c>false</c> to decode byte.</param>
            <returns>Return encoded/decoded byte</returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IRotorController.Reset">
            <summary>
            Resets controller back to starting position
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IRotorController.Clear">
            <summary>
            Clears all settings for this controller
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotorController.EntryRotor">
            <summary>
            Gets or sets the entry rotor.
            </summary>
            <value>
            The entry rotor.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotorController.Rotors">
            <summary>
            Gets the collection of rotors
            </summary>
            <value>
            The rotors.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotorController.Reflector">
            <summary>
            Gets or sets the reflector.
            </summary>
            <value>
            The reflector.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotorController.Turns">
            <summary>
            Gets the turns.
            </summary>
            <value>
            The turns.
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.IRotorParameters">
            <summary>
            Provides configuration settings for a rotor
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotorParameters.SubstitutionSet">
            <summary>
            Gets or sets the substitution set.
            </summary>
            <value>
            Array of EndPointPair&lt;byte, byte&gt;
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotorParameters.Incrementation">
            <summary>
            Gets or sets the incrementation.
            </summary>
            <value>
            int incrementation value;
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotorParameters.StartPosition">
            <summary>
            Gets or sets the start position.
            </summary>
            <value>
            int start position value
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IRotorParameters.TurnDirection">
            <summary>
            Gets or sets the turn direction.
            </summary>
            <value>
            enum RotorTurnDirection turn direction value
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.IStreamCipher">
            <summary>The interface stream ciphers conform to.</summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.IStreamCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IStreamCipher.Init(System.Boolean,Ekstrand.Encryption.Ciphers.ICipherParameters)">
            <summary>Initialize the cipher.</summary>
            <param name="forEncryption">If true the cipher is initialized for encryption,
            if false for decryption.</param>
            <param name="parameters">The key and other data required by the cipher.</param>
            <exception cref="T:System.ArgumentException">
            If the parameters argument is inappropriate.
            </exception>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IStreamCipher.ReturnByte(System.Byte)">
            <summary>encrypt/decrypt a single byte returning the result.</summary>
            <param name="input">the byte to be processed.</param>
            <returns>the result of processing the input byte.</returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IStreamCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process a block of bytes from <c>input</c> putting the result into <c>output</c>.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inOff">
            The offset into <c>input</c> where the data to be processed starts.
            </param>
            <param name="length">The number of bytes to be processed.</param>
            <param name="output">The output buffer the processed bytes go into.</param>
            <param name="outOff">
            The offset into <c>output</c> the processed data starts at.
            </param>
            <exception cref="T:Ekstrand.Encryption.Ciphers.DataLengthException">If the output buffer is too small.</exception>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.IStreamCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.ITurn">
            <summary>
            Defines methods for Turn operations
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.ITurn.TurnRotor">
            <summary>
            Turns the rotor.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.ITurn.Clear">
            <summary>
            Clears all settings
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.ITurn.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.ITurn.Rotor">
            <summary>
            Gets or sets the rotor.
            </summary>
            <value>
            Rotor object
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.ITurn.NextTurn">
            <summary>
            Gets or sets the next turn.
            </summary>
            <value>
            Next Turn object
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.ITurn.FullyCycled">
            <summary>
            Gets a value indicating whether [fully cycled].
            </summary>
            <value>
              <c>true</c> if [fully cycled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.ITurn.StarterRotor">
            <summary>
            Gets a value indicating whether Rotor is starter 
            </summary>
            <value>
              <c>true</c> if starter rotor otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.Plugboard">
            <summary>
            Defines Plugboard operations.
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.AbstractPlugboard" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Plugboard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.Plugboard"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Plugboard.#ctor(Ekstrand.Encryption.Ciphers.EndPointPair{System.Byte,System.Byte}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.Plugboard"/> class.
            </summary>
            <param name="values">Array of EndPointPair&lt;byte, byte&gt;</param>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Plugboard.Transpose(System.Byte)">
            <summary>
            Transposes the specified value.
            </summary>
            <param name="value">byte value to be transposed</param>
            <returns>
            Return a transposed byte iff plugboard has a transpose mapping, otherwise; return the given byte
            </returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Plugboard.Clear">
            <summary>
            Clears all settings
            </summary>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.PlugboardParameters">
            <summary>
            Plugboard 
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.PlugboardParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.PlugboardParameters"/> class.
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.PlugboardParameters.TranspositionSet">
            <summary>
            Gets or sets the transposition set.
            </summary>
            <value>
            The transposition set.
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.RandomEndPointsGenerator">
            <summary>
            Randomly generated set of EntryRotor, Rotor, Reflector, and Plugboard end points pairs.
            </summary> 
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.RandomEndPointsGenerator.TranspositionLevel">
            <summary>
            Transposition level
            </summary>
        </member>
        <member name="F:Ekstrand.Encryption.Ciphers.RandomEndPointsGenerator.TranspositionLevel.LOW">
            <summary>
            Lowest transposition combinations
            </summary>
        </member>
        <member name="F:Ekstrand.Encryption.Ciphers.RandomEndPointsGenerator.TranspositionLevel.MEDIUM">
            <summary>
            Medium transposition combinations. 
            </summary>
        </member>
        <member name="F:Ekstrand.Encryption.Ciphers.RandomEndPointsGenerator.TranspositionLevel.HIGH">
            <summary>
            Highest transposition combinations
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.RandomEndPointsGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.RandomEndPointsGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.RandomEndPointsGenerator.GeneratePlugboard(Ekstrand.Encryption.Ciphers.RandomEndPointsGenerator.TranspositionLevel)">
            <summary>
            Generates EndPointPairs for plugboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.RandomEndPointsGenerator.GenerateRotor">
            <summary>
            Generates EndPointPairs for rotor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.RandomEndPointsGenerator.GenerateReflector">
            <summary>
            Generates EndPointPairs for reflector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.RandomEndPointsGenerator.GenerateEntryRotor">
            <summary>
            Generates EndPointsPairs for Entry Rotor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.RandomEndPointsGenerator.GenerateRotorSet(System.Int32)">
            <summary>
            Generate a set of random EndPointPair
            </summary>
            <param name="size">int The number of end points to be generated</param>
            <returns>Returns an array of EndPointPairs</returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.RandomEndPointsGenerator.GeneratePlugboardSet(System.Int32)">
            <summary>
            Generate a set of random EndPointPair
            </summary>
            <param name="size">int The number of end points to be generated</param>
            <returns>Returns an array of EndPointPairs</returns>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.Reflector">
            <summary>
            Definedes Reflector operations.
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.AbstractRotor" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Reflector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.Reflector"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Reflector.#ctor(Ekstrand.Encryption.Ciphers.EndPointPair{System.Byte,System.Byte}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.Reflector"/> class.
            </summary>
            <param name="values">Array of EndPointPair&lt;byte, byte&gt;</param>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Reflector.ProcessByte(System.Byte,System.Boolean)">
            <summary>
            Endcode/Decode byte
            </summary>
            <param name="value">The value.</param>
            /// <param name="encode">Bool mode of operation "true" is encode and "false" is decode</param>
            <returns>
            Return encode/decode byte
            </returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Reflector.Reset">
            <summary>
            Reset Rotor back to starting position
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Reflector.Clear">
            <summary>
            Clear all settings
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Reflector.Turn">
            <summary>
            Turn a rotor
            </summary>
            <remarks>Not used</remarks>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Reflector.HasCycled">
            <summary>
            Determines whether this instance has cycled.
            </summary>
            <remarks>Not used</remarks>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.ReflectorParameters">
            <summary>
            Provide configuration for Reflector
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.IReflectorParameters" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.ReflectorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.ReflectorParameters"/> class.
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.ReflectorParameters.SubstitutionSet">
            <summary>
            Gets or sets the substitution set.
            </summary>
            <value>
            The substitution set.
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.Rotor">
            <summary>
            Defines Rotor operations.
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.AbstractRotor" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Rotor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.EntryRotor"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Rotor.#ctor(Ekstrand.Encryption.Ciphers.EndPointPair{System.Byte,System.Byte}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.EntryRotor"/> class.
            </summary>
            <param name="values">Array of EndPointPair&lt;byte, byte&gt;</param>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Rotor.ProcessByte(System.Byte,System.Boolean)">
            <summary>
            Processes the byte.
            </summary>
            <param name="value">Encoded/decoded byte value</param>
            <param name="encode">Bool mode of operation "true" is encode and "false" is decode</param>
            <returns>Returns encoded or decoded byte value</returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Rotor.Reset">
            <summary>
            Resets rotor back to start position
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Rotor.Clear">
            <summary>
            Clears all rotor settings 
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Rotor.Turn">
            <summary>
            Turns rotor
            </summary>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.RotorController">
            <summary>
            Defines RotorControler operations.
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.AbstractRotorController" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.RotorController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.RotorController"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.RotorController.Initialize">
            <summary>
            Initializer this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">Rotor and Turn Collection count do not match.</exception>
            <exception cref="T:System.NullReferenceException">
            Reflector
            or
            EntryRotor
            </exception>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.RotorController.ProcessByte(System.Byte,System.Boolean)">
            <summary>
            Encoding/Decoding of byte.
            </summary>
            <param name="value">Byte to be encoded/decoded</param>
            <param name="encode">Bool <c>true</c> to encode byte or <c>false</c> to decode byte.</param>
            <returns>
            Return encoded/decoded byte
            </returns>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.RotorController.Reset">
            <summary>
            Resets controller back to starting position
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.RotorController.Clear">
            <summary>
            Clears all settings for this controller
            </summary>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.RotorParameters">
            <summary>
            Provide configuration for a Rotor
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.IRotorParameters" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.RotorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.RotorParameters"/> class.
            </summary>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.RotorParameters.Incrementation">
            <summary>
            Gets or sets the incrementation.
            </summary>
            <value>
            int incrementation value;
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.RotorParameters.StartPosition">
            <summary>
            Gets or sets the start position.
            </summary>
            <value>
            int start position value
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.RotorParameters.SubstitutionSet">
            <summary>
            Gets or sets the substitution set.
            </summary>
            <value>
            The substitution set.
            </value>
        </member>
        <member name="P:Ekstrand.Encryption.Ciphers.RotorParameters.TurnDirection">
            <summary>
            Gets or sets the turn direction.
            </summary>
            <value>
            enum RotorTurnDirection turn direction value
            </value>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.RotorTurnDirection">
            <summary>
            Rotor Turn Direction
            </summary>
        </member>
        <member name="F:Ekstrand.Encryption.Ciphers.RotorTurnDirection.CW">
            <summary>Clock Wise </summary>
        </member>
        <member name="F:Ekstrand.Encryption.Ciphers.RotorTurnDirection.CCW">
            <summary>Counter Clock Wise</summary>
        </member>
        <member name="F:Ekstrand.Encryption.Ciphers.RotorTurnDirection.BOTH">
            <summary>Operates in both Direction</summary>
        </member>
        <member name="T:Ekstrand.Encryption.Ciphers.Turn">
            <summary>
            Defines Turn operations.
            </summary>
            <seealso cref="T:Ekstrand.Encryption.Ciphers.AbstractTurn" />
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Turn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ekstrand.Encryption.Ciphers.Turn"/> class.
            </summary>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Turn.TurnRotor">
            <summary>
            Turns the rotor.
            </summary>
            <exception cref="T:System.ArgumentNullException">Rotor</exception>
        </member>
        <member name="M:Ekstrand.Encryption.Ciphers.Turn.Clear">
            <summary>
            Clears all settings
            </summary>
        </member>
    </members>
</doc>
